/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRedemptionPriceSnapInterface extends ethers.utils.Interface {
  functions: {
    "TEN_THOUSAND()": FunctionFragment;
    "addAuthorization(address)": FunctionFragment;
    "authorizedAccounts(address)": FunctionFragment;
    "modifyParameters(bytes32,address)": FunctionFragment;
    "oracleRelayer()": FunctionFragment;
    "removeAuthorization(address)": FunctionFragment;
    "snappedRedemptionPrice()": FunctionFragment;
    "updateAndGetSnappedPrice()": FunctionFragment;
    "updateSnappedPrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TEN_THOUSAND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "snappedRedemptionPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndGetSnappedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSnappedPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TEN_THOUSAND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snappedRedemptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAndGetSnappedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSnappedPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRedemptionPriceSnap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRedemptionPriceSnapInterface;

  functions: {
    TEN_THOUSAND(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAuthorization(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    modifyParameters(
      parameter: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleRelayer(overrides?: CallOverrides): Promise<[string]>;

    removeAuthorization(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snappedRedemptionPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAndGetSnappedPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSnappedPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TEN_THOUSAND(overrides?: CallOverrides): Promise<BigNumber>;

  addAuthorization(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizedAccounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  modifyParameters(
    parameter: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleRelayer(overrides?: CallOverrides): Promise<string>;

  removeAuthorization(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snappedRedemptionPrice(overrides?: CallOverrides): Promise<BigNumber>;

  updateAndGetSnappedPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSnappedPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TEN_THOUSAND(overrides?: CallOverrides): Promise<BigNumber>;

    addAuthorization(account: string, overrides?: CallOverrides): Promise<void>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyParameters(
      parameter: BytesLike,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleRelayer(overrides?: CallOverrides): Promise<string>;

    removeAuthorization(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    snappedRedemptionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    updateAndGetSnappedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    updateSnappedPrice(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    TEN_THOUSAND(overrides?: CallOverrides): Promise<BigNumber>;

    addAuthorization(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyParameters(
      parameter: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuthorization(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snappedRedemptionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    updateAndGetSnappedPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSnappedPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TEN_THOUSAND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAuthorization(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyParameters(
      parameter: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuthorization(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snappedRedemptionPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAndGetSnappedPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSnappedPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
