/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Collector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Collector__factory>;
    getContractFactory(
      name: "GaugeBriber",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GaugeBriber__factory>;
    getContractFactory(
      name: "IBPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBPool__factory>;
    getContractFactory(
      name: "RevenueBuyBack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevenueBuyBack__factory>;
    getContractFactory(
      name: "RevenueForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevenueForwarder__factory>;
    getContractFactory(
      name: "RevenueRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevenueRecipient__factory>;
    getContractFactory(
      name: "BasicRewardsForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicRewardsForwarder__factory>;
    getContractFactory(
      name: "BridgeForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeForwarder__factory>;
    getContractFactory(
      name: "DisperseForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DisperseForwarder__factory>;
    getContractFactory(
      name: "EmissionsController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmissionsController__factory>;
    getContractFactory(
      name: "L2BridgeRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2BridgeRecipient__factory>;
    getContractFactory(
      name: "L2EmissionsController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2EmissionsController__factory>;
    getContractFactory(
      name: "VotiumBribeForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotiumBribeForwarder__factory>;
    getContractFactory(
      name: "FeederLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeederLogic__factory>;
    getContractFactory(
      name: "FeederManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeederManager__factory>;
    getContractFactory(
      name: "FeederPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeederPool__factory>;
    getContractFactory(
      name: "InterestValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestValidator__factory>;
    getContractFactory(
      name: "NonPeggedFeederPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonPeggedFeederPool__factory>;
    getContractFactory(
      name: "FeederWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeederWrapper__factory>;
    getContractFactory(
      name: "ClaimableGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimableGovernor__factory>;
    getContractFactory(
      name: "DelayedClaimableGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelayedClaimableGovernor__factory>;
    getContractFactory(
      name: "Governable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governable__factory>;
    getContractFactory(
      name: "IncentivisedVotingLockup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncentivisedVotingLockup__factory>;
    getContractFactory(
      name: "SignatureVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureVerifier__factory>;
    getContractFactory(
      name: "GamifiedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GamifiedToken__factory>;
    getContractFactory(
      name: "GamifiedVotingToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GamifiedVotingToken__factory>;
    getContractFactory(
      name: "IBVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBVault__factory>;
    getContractFactory(
      name: "IGovernanceHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernanceHook__factory>;
    getContractFactory(
      name: "ILockedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILockedERC20__factory>;
    getContractFactory(
      name: "IQuestManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuestManager__factory>;
    getContractFactory(
      name: "IStakedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedToken__factory>;
    getContractFactory(
      name: "QuestManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuestManager__factory>;
    getContractFactory(
      name: "StakedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedToken__factory>;
    getContractFactory(
      name: "StakedTokenBPT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedTokenBPT__factory>;
    getContractFactory(
      name: "StakedTokenZENO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedTokenZENO__factory>;
    getContractFactory(
      name: "IBoostDirector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBoostDirector__factory>;
    getContractFactory(
      name: "IBoostedDualVaultWithLockup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBoostedDualVaultWithLockup__factory>;
    getContractFactory(
      name: "IBoostedVaultWithLockup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBoostedVaultWithLockup__factory>;
    getContractFactory(
      name: "IDisperse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDisperse__factory>;
    getContractFactory(
      name: "IEjector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEjector__factory>;
    getContractFactory(
      name: "IEmissionsController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmissionsController__factory>;
    getContractFactory(
      name: "IFAssetRedemptionPriceGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFAssetRedemptionPriceGetter__factory>;
    getContractFactory(
      name: "IFeederPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeederPool__factory>;
    getContractFactory(
      name: "IIncentivisedVotingLockup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIncentivisedVotingLockup__factory>;
    getContractFactory(
      name: "IInvariantValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInvariantValidator__factory>;
    getContractFactory(
      name: "IMasset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasset__factory>;
    getContractFactory(
      name: "INexus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INexus__factory>;
    getContractFactory(
      name: "IPlatformIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlatformIntegration__factory>;
    getContractFactory(
      name: "IRevenueRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRevenueRecipient__factory>;
    getContractFactory(
      name: "IRewardsDistributionRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsDistributionRecipient__factory>;
    getContractFactory(
      name: "IRewardsRecipientWithPlatformToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsRecipientWithPlatformToken__factory>;
    getContractFactory(
      name: "IChildToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChildToken__factory>;
    getContractFactory(
      name: "IRootChainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRootChainManager__factory>;
    getContractFactory(
      name: "IStateReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateReceiver__factory>;
    getContractFactory(
      name: "ISavingsContractV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISavingsContractV1__factory>;
    getContractFactory(
      name: "ISavingsContractV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISavingsContractV2__factory>;
    getContractFactory(
      name: "ISavingsContractV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISavingsContractV3__factory>;
    getContractFactory(
      name: "ISavingsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISavingsManager__factory>;
    getContractFactory(
      name: "IStakingRewardsWithPlatformToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingRewardsWithPlatformToken__factory>;
    getContractFactory(
      name: "IUnwrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnwrapper__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "IVotiumBribe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotiumBribe__factory>;
    getContractFactory(
      name: "ILiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidator__factory>;
    getContractFactory(
      name: "Liquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Liquidator__factory>;
    getContractFactory(
      name: "Masset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Masset__factory>;
    getContractFactory(
      name: "MassetLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MassetLogic__factory>;
    getContractFactory(
      name: "MassetManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MassetManager__factory>;
    getContractFactory(
      name: "AaveV2Integration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2Integration__factory>;
    getContractFactory(
      name: "AbstractIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractIntegration__factory>;
    getContractFactory(
      name: "AlchemixIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlchemixIntegration__factory>;
    getContractFactory(
      name: "CompoundIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundIntegration__factory>;
    getContractFactory(
      name: "DudIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DudIntegration__factory>;
    getContractFactory(
      name: "DudPlatform",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DudPlatform__factory>;
    getContractFactory(
      name: "IDudPlatform",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDudPlatform__factory>;
    getContractFactory(
      name: "IGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGateway__factory>;
    getContractFactory(
      name: "IGatewayRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayRegistry__factory>;
    getContractFactory(
      name: "RenWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RenWrapper__factory>;
    getContractFactory(
      name: "MV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MV1__factory>;
    getContractFactory(
      name: "MV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MV2__factory>;
    getContractFactory(
      name: "Nexus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Nexus__factory>;
    getContractFactory(
      name: "IAaveATokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveATokenV2__factory>;
    getContractFactory(
      name: "IAaveLendingPoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveLendingPoolV2__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProviderV2__factory>;
    getContractFactory(
      name: "IStakedAave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedAave__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAlchemixStakingPools",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlchemixStakingPools__factory>;
    getContractFactory(
      name: "ICERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICERC20__factory>;
    getContractFactory(
      name: "ICurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurve__factory>;
    getContractFactory(
      name: "DyDxPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DyDxPool__factory>;
    getContractFactory(
      name: "DyDxFlashLoan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DyDxFlashLoan__factory>;
    getContractFactory(
      name: "IRedemptionPriceSnap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRedemptionPriceSnap__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IUniswapV3Quoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Quoter__factory>;
    getContractFactory(
      name: "IUniswapV3SwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapRouter__factory>;
    getContractFactory(
      name: "IClaimRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimRewards__factory>;
    getContractFactory(
      name: "IPLiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPLiquidator__factory>;
    getContractFactory(
      name: "PAaveIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PAaveIntegration__factory>;
    getContractFactory(
      name: "PLiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PLiquidator__factory>;
    getContractFactory(
      name: "BoostDirector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoostDirector__factory>;
    getContractFactory(
      name: "BoostDirectorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoostDirectorV2__factory>;
    getContractFactory(
      name: "BoostedDualVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoostedDualVault__factory>;
    getContractFactory(
      name: "BoostedTokenWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoostedTokenWrapper__factory>;
    getContractFactory(
      name: "BoostedVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoostedVault__factory>;
    getContractFactory(
      name: "InitializableRewardsDistributionRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableRewardsDistributionRecipient__factory>;
    getContractFactory(
      name: "RewardsDistributionRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsDistributionRecipient__factory>;
    getContractFactory(
      name: "RewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsDistributor__factory>;
    getContractFactory(
      name: "HeadlessStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HeadlessStakingRewards__factory>;
    getContractFactory(
      name: "PlatformTokenVendor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlatformTokenVendor__factory>;
    getContractFactory(
      name: "PlatformTokenVendorFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlatformTokenVendorFactory__factory>;
    getContractFactory(
      name: "StakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewards__factory>;
    getContractFactory(
      name: "StakingRewardsWithPlatformToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewardsWithPlatformToken__factory>;
    getContractFactory(
      name: "StakingTokenWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingTokenWrapper__factory>;
    getContractFactory(
      name: "IConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConnector__factory>;
    getContractFactory(
      name: "SaveWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaveWrapper__factory>;
    getContractFactory(
      name: "Unwrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Unwrapper__factory>;
    getContractFactory(
      name: "Poker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Poker__factory>;
    getContractFactory(
      name: "SavingsContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SavingsContract__factory>;
    getContractFactory(
      name: "SavingsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SavingsManager__factory>;
    getContractFactory(
      name: "ERC205",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC205__factory>;
    getContractFactory(
      name: "InstantProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InstantProxyAdmin__factory>;
    getContractFactory(
      name: "GovernedMinterRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernedMinterRole__factory>;
    getContractFactory(
      name: "IBasicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasicToken__factory>;
    getContractFactory(
      name: "IERC20WithCheckpointing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20WithCheckpointing__factory>;
    getContractFactory(
      name: "ImmutableModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableModule__factory>;
    getContractFactory(
      name: "InitializableERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableERC20Detailed__factory>;
    getContractFactory(
      name: "InitializableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableToken__factory>;
    getContractFactory(
      name: "MintableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableToken__factory>;
    getContractFactory(
      name: "PausableModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableModule__factory>;
    getContractFactory(
      name: "DelayedProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelayedProxyAdmin__factory>;
    getContractFactory(
      name: "AssetProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetProxy__factory>;
    getContractFactory(
      name: "BasketManagerProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasketManagerProxy__factory>;
    getContractFactory(
      name: "LiquidatorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidatorProxy__factory>;
    getContractFactory(
      name: "VaultProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultProxy__factory>;
    getContractFactory(
      name: "ConfigurableRightsPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigurableRightsPool__factory>;
    getContractFactory(
      name: "CRPFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CRPFactory__factory>;
    getContractFactory(
      name: "MockBPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBPool__factory>;
    getContractFactory(
      name: "RevenueRecipientV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevenueRecipientV1__factory>;
    getContractFactory(
      name: "MockDisperse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockDisperse__factory>;
    getContractFactory(
      name: "MockVotiumBribe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVotiumBribe__factory>;
    getContractFactory(
      name: "ExposedFeederLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExposedFeederLogic__factory>;
    getContractFactory(
      name: "ExposedFeederPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExposedFeederPool__factory>;
    getContractFactory(
      name: "ExposedNonPeggedFeederPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExposedNonPeggedFeederPool__factory>;
    getContractFactory(
      name: "RedemptionPriceSnapMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedemptionPriceSnapMock__factory>;
    getContractFactory(
      name: "MockBPT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBPT__factory>;
    getContractFactory(
      name: "MockBVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBVault__factory>;
    getContractFactory(
      name: "MockEmissionController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockEmissionController__factory>;
    getContractFactory(
      name: "MockStakedTokenWithPrice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStakedTokenWithPrice__factory>;
    getContractFactory(
      name: "StakedTokenWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedTokenWrapper__factory>;
    getContractFactory(
      name: "ExposedMasset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExposedMasset__factory>;
    getContractFactory(
      name: "ExposedMassetLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExposedMassetLogic__factory>;
    getContractFactory(
      name: "MaliciousAaveIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousAaveIntegration__factory>;
    getContractFactory(
      name: "IBasketManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasketManager__factory>;
    getContractFactory(
      name: "IMassetV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMassetV1__factory>;
    getContractFactory(
      name: "ZusdV2Rebalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZusdV2Rebalance__factory>;
    getContractFactory(
      name: "ZusdV2SusdBalancer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZusdV2SusdBalancer__factory>;
    getContractFactory(
      name: "MockAaveV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAaveV2__factory>;
    getContractFactory(
      name: "MockATokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockATokenV2__factory>;
    getContractFactory(
      name: "MockCToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCToken__factory>;
    getContractFactory(
      name: "MockMasset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMasset__factory>;
    getContractFactory(
      name: "MockMasset1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMasset1__factory>;
    getContractFactory(
      name: "MockPlatformIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPlatformIntegration__factory>;
    getContractFactory(
      name: "MockPlatformIntegrationWithToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPlatformIntegrationWithToken__factory>;
    getContractFactory(
      name: "MockRewardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRewardToken__factory>;
    getContractFactory(
      name: "ValidatorWithTVLCap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorWithTVLCap__factory>;
    getContractFactory(
      name: "MockNexus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockNexus__factory>;
    getContractFactory(
      name: "MockRewardsDistributionRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRewardsDistributionRecipient__factory>;
    getContractFactory(
      name: "MockRootChainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRootChainManager__factory>;
    getContractFactory(
      name: "MockConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockConnector__factory>;
    getContractFactory(
      name: "MockErroneousConnector1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockErroneousConnector1__factory>;
    getContractFactory(
      name: "MockErroneousConnector2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockErroneousConnector2__factory>;
    getContractFactory(
      name: "MockLendingConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLendingConnector__factory>;
    getContractFactory(
      name: "MockVaultConnector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVaultConnector__factory>;
    getContractFactory(
      name: "MockBoostedVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBoostedVault__factory>;
    getContractFactory(
      name: "MockRevenueRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRevenueRecipient__factory>;
    getContractFactory(
      name: "MockSavingsContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSavingsContract__factory>;
    getContractFactory(
      name: "MockSavingsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSavingsManager__factory>;
    getContractFactory(
      name: "MockStakingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStakingContract__factory>;
    getContractFactory(
      name: "DeadToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeadToken__factory>;
    getContractFactory(
      name: "IXZenoVoterProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IXZenoVoterProxy__factory>;
    getContractFactory(
      name: "MockAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAaveIncentivesController__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "ERC20WithFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithFee__factory>;
    getContractFactory(
      name: "MockERC20WithFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20WithFee__factory>;
    getContractFactory(
      name: "MockGovernable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockGovernable__factory>;
    getContractFactory(
      name: "MockInitializableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInitializableToken__factory>;
    getContractFactory(
      name: "MockInitializableTokenWithFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInitializableTokenWithFee__factory>;
    getContractFactory(
      name: "MockRoot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRoot__factory>;
    getContractFactory(
      name: "MockStakedAave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStakedAave__factory>;
    getContractFactory(
      name: "MockTrigger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTrigger__factory>;
    getContractFactory(
      name: "MockUniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswap__factory>;
    getContractFactory(
      name: "MockUniswapV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV3__factory>;
    getContractFactory(
      name: "PublicStableMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicStableMath__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
