/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GamifiedTokenInterface extends ethers.utils.Interface {
  functions: {
    "DURATION()": FunctionFragment;
    "REWARDS_TOKEN()": FunctionFragment;
    "applyQuestMultiplier(address,uint8)": FunctionFragment;
    "balanceData(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "decimals()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "getRewardToken()": FunctionFragment;
    "globalData()": FunctionFragment;
    "hasPriceCoeff()": FunctionFragment;
    "lastTimeRewardApplicable()": FunctionFragment;
    "name()": FunctionFragment;
    "nexus()": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "pendingAdditionalReward()": FunctionFragment;
    "questManager()": FunctionFragment;
    "rawBalanceOf(address)": FunctionFragment;
    "reviewTimestamp(address)": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardTokenVendor()": FunctionFragment;
    "rewardsDistributor()": FunctionFragment;
    "setRewardsDistribution(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "userData(address)": FunctionFragment;
    "userPriceCoeff(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DURATION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REWARDS_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyQuestMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceData", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPriceCoeff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nexus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdditionalReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "questManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenVendor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDistribution",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userPriceCoeff",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "DURATION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARDS_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyQuestMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "globalData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPriceCoeff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nexus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdditionalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "questManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenVendor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPriceCoeff",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "RewardAdded(uint256)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class GamifiedToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GamifiedTokenInterface;

  functions: {
    DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARDS_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceData(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, number, number, number, BigNumber] & {
          raw: BigNumber;
          weightedTimestamp: number;
          timeMultiplier: number;
          questMultiplier: number;
          cooldownTimestamp: number;
          cooldownUnits: BigNumber;
        }
      ]
    >;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReward(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    earned(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardToken(overrides?: CallOverrides): Promise<[string]>;

    globalData(
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber] & {
        periodFinish: number;
        lastUpdateTime: number;
        rewardRate: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    hasPriceCoeff(overrides?: CallOverrides): Promise<[boolean]>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingAdditionalReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    questManager(overrides?: CallOverrides): Promise<[string]>;

    rawBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reviewTimestamp(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokenVendor(overrides?: CallOverrides): Promise<[string]>;

    rewardsDistributor(overrides?: CallOverrides): Promise<[string]>;

    setRewardsDistribution(
      _rewardsDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    userPriceCoeff(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  REWARDS_TOKEN(overrides?: CallOverrides): Promise<string>;

  applyQuestMultiplier(
    _account: string,
    _newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceData(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, BigNumber] & {
      raw: BigNumber;
      weightedTimestamp: number;
      timeMultiplier: number;
      questMultiplier: number;
      cooldownTimestamp: number;
      cooldownUnits: BigNumber;
    }
  >;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimReward()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReward(address)"(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRewardToken(overrides?: CallOverrides): Promise<string>;

  globalData(
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber] & {
      periodFinish: number;
      lastUpdateTime: number;
      rewardRate: BigNumber;
      rewardPerTokenStored: BigNumber;
    }
  >;

  hasPriceCoeff(overrides?: CallOverrides): Promise<boolean>;

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nexus(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>;

  questManager(overrides?: CallOverrides): Promise<string>;

  rawBalanceOf(
    _account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  reviewTimestamp(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokenVendor(overrides?: CallOverrides): Promise<string>;

  rewardsDistributor(overrides?: CallOverrides): Promise<string>;

  setRewardsDistribution(
    _rewardsDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  userData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      rewardPerTokenPaid: BigNumber;
      rewards: BigNumber;
    }
  >;

  userPriceCoeff(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARDS_TOKEN(overrides?: CallOverrides): Promise<string>;

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceData(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, BigNumber] & {
        raw: BigNumber;
        weightedTimestamp: number;
        timeMultiplier: number;
        questMultiplier: number;
        cooldownTimestamp: number;
        cooldownUnits: BigNumber;
      }
    >;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimReward()"(overrides?: CallOverrides): Promise<void>;

    "claimReward(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<string>;

    globalData(
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber] & {
        periodFinish: number;
        lastUpdateTime: number;
        rewardRate: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    hasPriceCoeff(overrides?: CallOverrides): Promise<boolean>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nexus(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>;

    questManager(overrides?: CallOverrides): Promise<string>;

    rawBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reviewTimestamp(_account: string, overrides?: CallOverrides): Promise<void>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenVendor(overrides?: CallOverrides): Promise<string>;

    rewardsDistributor(overrides?: CallOverrides): Promise<string>;

    setRewardsDistribution(
      _rewardsDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    userPriceCoeff(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    RewardAdded(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    RewardPaid(
      user?: string | null,
      to?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; to: string; reward: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARDS_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceData(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReward(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    earned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    globalData(overrides?: CallOverrides): Promise<BigNumber>;

    hasPriceCoeff(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>;

    questManager(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reviewTimestamp(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenVendor(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardsDistribution(
      _rewardsDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    userData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userPriceCoeff(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARDS_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceData(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPriceCoeff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingAdditionalReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    questManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewTimestamp(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenVendor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardsDistribution(
      _rewardsDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPriceCoeff(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
