/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardsDistributorInterface extends ethers.utils.Interface {
  functions: {
    "addFundManager(address)": FunctionFragment;
    "distributeRewards(address[],uint256[],uint256[])": FunctionFragment;
    "fundManagers(address)": FunctionFragment;
    "nexus()": FunctionFragment;
    "removeFundManager(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFundManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fundManagers",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nexus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFundManager",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFundManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nexus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFundManager",
    data: BytesLike
  ): Result;

  events: {
    "AddedFundManager(address)": EventFragment;
    "DistributedReward(address,address,address,uint256,address,uint256)": EventFragment;
    "RemovedFundManager(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedFundManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFundManager"): EventFragment;
}

export class RewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsDistributorInterface;

  functions: {
    addFundManager(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      _recipients: string[],
      _amounts: BigNumberish[],
      _platformAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundManagers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

    removeFundManager(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addFundManager(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    _recipients: string[],
    _amounts: BigNumberish[],
    _platformAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundManagers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nexus(overrides?: CallOverrides): Promise<string>;

  removeFundManager(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFundManager(_address: string, overrides?: CallOverrides): Promise<void>;

    distributeRewards(
      _recipients: string[],
      _amounts: BigNumberish[],
      _platformAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    fundManagers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nexus(overrides?: CallOverrides): Promise<string>;

    removeFundManager(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddedFundManager(
      _address?: string | null
    ): TypedEventFilter<[string], { _address: string }>;

    DistributedReward(
      funder?: null,
      recipient?: null,
      rewardToken?: null,
      amount?: null,
      platformToken?: null,
      platformAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, BigNumber],
      {
        funder: string;
        recipient: string;
        rewardToken: string;
        amount: BigNumber;
        platformToken: string;
        platformAmount: BigNumber;
      }
    >;

    RemovedFundManager(
      _address?: string | null
    ): TypedEventFilter<[string], { _address: string }>;
  };

  estimateGas: {
    addFundManager(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      _recipients: string[],
      _amounts: BigNumberish[],
      _platformAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundManagers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

    removeFundManager(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFundManager(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      _recipients: string[],
      _amounts: BigNumberish[],
      _platformAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundManagers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFundManager(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
