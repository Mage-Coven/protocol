/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockVaultConnector,
  MockVaultConnectorInterface,
} from "../MockVaultConnector";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_save",
        type: "address",
      },
      {
        internalType: "address",
        name: "_zUSD",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "checkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "poke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106a23803806106a283398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6105e4806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063181783581461005c5780632e1a7d4d14610066578063853828b614610079578063b6b55f2514610081578063c71daccb14610094575b600080fd5b6100646100ae565b005b6100646100743660046104d8565b610122565b61006461029c565b61006461008f3660046104d8565b610389565b61009c610485565b60405190815260200160405180910390f35b60045442901561011d576000600454826100c89190610581565b905060006100db6407620d06ef83610562565b90506000670de0b6b3a7640000826003546100f69190610562565b6101009190610540565b905080600360008282546101149190610528565b90915550505050505b600455565b6000546001600160a01b031633146101555760405162461bcd60e51b815260040161014c906104f1565b60405180910390fd5b600061015f610494565b905061016b8282610581565b60025560015460005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb90604401602060405180830381600087803b1580156101be57600080fd5b505af11580156101d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f691906104af565b506103e8610206836103ed610562565b6102109190610540565b600360008282546102219190610581565b909155505060045442915015610296576000600454826102419190610581565b905060006102546407620d06ef83610562565b90506000670de0b6b3a76400008260035461026f9190610562565b6102799190610540565b9050806003600082825461028d9190610528565b90915550505050505b60045550565b6000546001600160a01b031633146102c65760405162461bcd60e51b815260040161014c906104f1565b60006002819055600154905460035460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb90604401602060405180830381600087803b15801561032057600080fd5b505af1158015610334573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035891906104af565b506003805490600061036a8380610581565b909155505060045442901561011d576000600454826100c89190610581565b6000546001600160a01b031633146103b35760405162461bcd60e51b815260040161014c906104f1565b60006103bd610494565b90506103c98282610528565b6002556001546000546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018590529116906323b872dd90606401602060405180830381600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a91906104af565b506103e861046a836103e3610562565b6104749190610540565b600360008282546102219190610528565b600061048f610494565b905090565b6000600354600254116104a8575060035490565b5060025490565b6000602082840312156104c157600080fd5b815180151581146104d157600080fd5b9392505050565b6000602082840312156104ea57600080fd5b5035919050565b60208082526017908201527f4f6e6c7920534156452063616e2063616c6c2074686973000000000000000000604082015260600190565b6000821982111561053b5761053b610598565b500190565b60008261055d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561057c5761057c610598565b500290565b60008282101561059357610593610598565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122015ae968f989b6ed911a3953b710451b7bae771ec91ac94f07759c23f3a8b267564736f6c63430008060033";

export class MockVaultConnector__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _save: string,
    _zUSD: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockVaultConnector> {
    return super.deploy(
      _save,
      _zUSD,
      overrides || {}
    ) as Promise<MockVaultConnector>;
  }
  getDeployTransaction(
    _save: string,
    _zUSD: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_save, _zUSD, overrides || {});
  }
  attach(address: string): MockVaultConnector {
    return super.attach(address) as MockVaultConnector;
  }
  connect(signer: Signer): MockVaultConnector__factory {
    return super.connect(signer) as MockVaultConnector__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultConnectorInterface {
    return new utils.Interface(_abi) as MockVaultConnectorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVaultConnector {
    return new Contract(address, _abi, signerOrProvider) as MockVaultConnector;
  }
}
