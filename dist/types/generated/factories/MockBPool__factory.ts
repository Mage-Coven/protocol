/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockBPool, MockBPoolInterface } from "../MockBPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_inputToOutputRatio",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amt",
        type: "uint256",
      },
    ],
    name: "addOutputToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minPoolAmountOut",
        type: "uint256",
      },
    ],
    name: "joinswapExternAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "poolAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200131538038062001315833981016040819052620000349162000222565b8151829082906200004d906003906020850190620000e7565b50805162000063906004906020840190620000e7565b5050506005849055825160005b81811015620000db57600160066000878481518110620000945762000094620003e7565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000d281620003bd565b91505062000070565b50505050505062000413565b828054620000f59062000380565b90600052602060002090601f01602090048101928262000119576000855562000164565b82601f106200013457805160ff191683800117855562000164565b8280016001018555821562000164579182015b828111156200016457825182559160200191906001019062000147565b506200017292915062000176565b5090565b5b8082111562000172576000815560010162000177565b600082601f8301126200019f57600080fd5b81516001600160401b03811115620001bb57620001bb620003fd565b6020620001d1601f8301601f191682016200034d565b8281528582848701011115620001e657600080fd5b60005b8381101562000206578581018301518282018401528201620001e9565b83811115620002185760008385840101525b5095945050505050565b600080600080608085870312156200023957600080fd5b8451602080870151919550906001600160401b03808211156200025b57600080fd5b818801915088601f8301126200027057600080fd5b815181811115620002855762000285620003fd565b8060051b620002968582016200034d565b8281528581019085870183870188018e1015620002b257600080fd5b600096505b84871015620002f057805193506001600160a01b0384168414620002da57600080fd5b83835260019690960195918701918701620002b7565b5060408c01519099509550505050808311156200030c57600080fd5b6200031a89848a016200018d565b945060608801519250808311156200033157600080fd5b505062000341878288016200018d565b91505092959194509250565b604051601f8201601f191681016001600160401b0381118282101715620003785762000378620003fd565b604052919050565b600181811c908216806200039557607f821691505b60208210811415620003b757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620003e057634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610ef280620004236000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b41146101f0578063a457c2d7146101f8578063a9059cbb1461020b578063dd62ed3e1461021e57600080fd5b806370a082311461018a57806372970df0146101b35780638201aa3f146101c857600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806339509351146101645780635db342771461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610257565b6040516101049190610d96565b60405180910390f35b61012061011b366004610cc9565b6102e9565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610c8d565b6102ff565b60405160128152602001610104565b610120610172366004610cc9565b6103b0565b610134610185366004610d41565b6103ec565b610134610198366004610c3f565b6001600160a01b031660009081526020819052604090205490565b6101c66101c1366004610cc9565b61051f565b005b6101db6101d6366004610cf3565b6105aa565b60408051928352602083019190915201610104565b6100f761079c565b610120610206366004610cc9565b6107ab565b610120610219366004610cc9565b610844565b61013461022c366004610c5a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461026690610e6b565b80601f016020809104026020016040519081016040528092919081815260200182805461029290610e6b565b80156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b5050505050905090565b60006102f6338484610851565b50600192915050565b600061030c848484610975565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103965760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103a38533858403610851565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102f69185906103e7908690610e12565b610851565b6001600160a01b03831660009081526006602052604081205460ff166104245760405162461bcd60e51b815260040161038d90610deb565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038516906323b872dd90606401602060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190610d74565b50670de0b6b3a7640000600554846104c29190610e4c565b6104cc9190610e2a565b90508181116105155760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081bdd5d1c1d5d08185b5bdd5b9d605a1b604482015260640161038d565b6103a93382610b44565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd90606401602060405180830381600087803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190610d74565b505050565b6001600160a01b038516600090815260066020526040812054819060ff166105e45760405162461bcd60e51b815260040161038d90610deb565b6001600160a01b03851660009081526006602052604090205460ff1661061c5760405162461bcd60e51b815260040161038d90610deb565b6040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b038816906323b872dd90606401602060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190610d74565b50670de0b6b3a7640000600554876106ba9190610e4c565b6106c49190610e2a565b915083821161070d5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081bdd5d1c1d5d08185b5bdd5b9d605a1b604482015260640161038d565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0386169063a9059cbb90604401602060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d9190610d74565b50600090509550959350505050565b60606004805461026690610e6b565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561082d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161038d565b61083a3385858403610851565b5060019392505050565b60006102f6338484610975565b6001600160a01b0383166108b35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161038d565b6001600160a01b0382166109145760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161038d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166109d95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161038d565b6001600160a01b038216610a3b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161038d565b6001600160a01b03831660009081526020819052604090205481811015610ab35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161038d565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610aea908490610e12565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b3691815260200190565b60405180910390a350505050565b6001600160a01b038216610b9a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161038d565b8060026000828254610bac9190610e12565b90915550506001600160a01b03821660009081526020819052604081208054839290610bd9908490610e12565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b0381168114610c3a57600080fd5b919050565b600060208284031215610c5157600080fd5b6103a982610c23565b60008060408385031215610c6d57600080fd5b610c7683610c23565b9150610c8460208401610c23565b90509250929050565b600080600060608486031215610ca257600080fd5b610cab84610c23565b9250610cb960208501610c23565b9150604084013590509250925092565b60008060408385031215610cdc57600080fd5b610ce583610c23565b946020939093013593505050565b600080600080600060a08688031215610d0b57600080fd5b610d1486610c23565b945060208601359350610d2960408701610c23565b94979396509394606081013594506080013592915050565b600080600060608486031215610d5657600080fd5b610d5f84610c23565b95602085013595506040909401359392505050565b600060208284031215610d8657600080fd5b815180151581146103a957600080fd5b600060208083528351808285015260005b81811015610dc357858101830151858201604001528201610da7565b81811115610dd5576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252600d908201526c24b73b30b634b2103a37b5b2b760991b604082015260600190565b60008219821115610e2557610e25610ea6565b500190565b600082610e4757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610e6657610e66610ea6565b500290565b600181811c90821680610e7f57607f821691505b60208210811415610ea057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea264697066735822122031ad44689eb20e4d3cdecfbc356871120712566ac587283e205db785ae24714864736f6c63430008060033";

export class MockBPool__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _inputToOutputRatio: BigNumberish,
    _tokens: string[],
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBPool> {
    return super.deploy(
      _inputToOutputRatio,
      _tokens,
      _name,
      _symbol,
      overrides || {}
    ) as Promise<MockBPool>;
  }
  getDeployTransaction(
    _inputToOutputRatio: BigNumberish,
    _tokens: string[],
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _inputToOutputRatio,
      _tokens,
      _name,
      _symbol,
      overrides || {}
    );
  }
  attach(address: string): MockBPool {
    return super.attach(address) as MockBPool;
  }
  connect(signer: Signer): MockBPool__factory {
    return super.connect(signer) as MockBPool__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBPoolInterface {
    return new utils.Interface(_abi) as MockBPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBPool {
    return new Contract(address, _abi, signerOrProvider) as MockBPool;
  }
}
