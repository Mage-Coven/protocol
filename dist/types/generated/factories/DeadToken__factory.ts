/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DeadToken, DeadTokenInterface } from "../DeadToken";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805460ff19166012179055348015601c57600080fd5b50607c8061002b6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063313ce56714602d575b600080fd5b6000546040805160ff9092168252519081900360200190f3fea2646970667358221220079b1970b2967e88f80ef40cbaf5ed5c7b59cefbf748dbb195135e1b38ae846264736f6c63430008060033";

export class DeadToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DeadToken> {
    return super.deploy(overrides || {}) as Promise<DeadToken>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DeadToken {
    return super.attach(address) as DeadToken;
  }
  connect(signer: Signer): DeadToken__factory {
    return super.connect(signer) as DeadToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeadTokenInterface {
    return new utils.Interface(_abi) as DeadTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DeadToken {
    return new Contract(address, _abi, signerOrProvider) as DeadToken;
  }
}
