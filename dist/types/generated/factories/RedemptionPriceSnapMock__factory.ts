/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RedemptionPriceSnapMock,
  RedemptionPriceSnapMockInterface,
} from "../RedemptionPriceSnapMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "setRedemptionPriceSnap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "snappedRedemptionPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506b033b2e3c9fd0803ce800000060005560ac8061002f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636998c48d146037578063a9531a0b14604c575b600080fd5b60005460405190815260200160405180910390f35b605c6057366004605e565b600055565b005b600060208284031215606f57600080fd5b503591905056fea2646970667358221220e26c67b48400297e187d5d48108d9a03dd250a7d9f5c8272182c6ceae130647864736f6c63430008060033";

export class RedemptionPriceSnapMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RedemptionPriceSnapMock> {
    return super.deploy(overrides || {}) as Promise<RedemptionPriceSnapMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RedemptionPriceSnapMock {
    return super.attach(address) as RedemptionPriceSnapMock;
  }
  connect(signer: Signer): RedemptionPriceSnapMock__factory {
    return super.connect(signer) as RedemptionPriceSnapMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RedemptionPriceSnapMockInterface {
    return new utils.Interface(_abi) as RedemptionPriceSnapMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RedemptionPriceSnapMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RedemptionPriceSnapMock;
  }
}
