/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockBPT, MockBPTInterface } from "../MockBPT";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "onExitPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f2a38038062000f2a8339810160408190526200003491620002cf565b8151829082906200004d90600390602085019062000172565b5080516200006390600490602084019062000172565b505050620000823369021e19e0c9bab24000006200008a60201b60201c565b5050620003b3565b6001600160a01b038216620000e55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000f9919062000339565b90915550506001600160a01b038216600090815260208190526040812080548392906200012890849062000339565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001809062000360565b90600052602060002090601f016020900481019282620001a45760008555620001ef565b82601f10620001bf57805160ff1916838001178555620001ef565b82800160010185558215620001ef579182015b82811115620001ef578251825591602001919060010190620001d2565b50620001fd92915062000201565b5090565b5b80821115620001fd576000815560010162000202565b600082601f8301126200022a57600080fd5b81516001600160401b03808211156200024757620002476200039d565b604051601f8301601f19908116603f011681019082821181831017156200027257620002726200039d565b816040528381526020925086838588010111156200028f57600080fd5b600091505b83821015620002b3578582018301518183018401529082019062000294565b83821115620002c55760008385830101525b9695505050505050565b60008060408385031215620002e357600080fd5b82516001600160401b0380821115620002fb57600080fd5b620003098683870162000218565b935060208501519150808211156200032057600080fd5b506200032f8582860162000218565b9150509250929050565b600082198211156200035b57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200037557607f821691505b602082108114156200039757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610b6780620003c36000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063487a87bd1161008c57806395d89b411161006657806395d89b41146101db578063a457c2d7146101e3578063a9059cbb146101f6578063dd62ed3e1461020957600080fd5b8063487a87bd1461018c57806370a082311461019f57806379cc6790146101c857600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016457806342966c681461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610242565b6040516101049190610a5c565b60405180910390f35b61012061011b366004610a19565b6102d4565b6040519015158152602001610104565b6002545b604051908152602001610104565b6101206101503660046109dd565b6102ea565b60405160128152602001610104565b610120610172366004610a19565b610399565b61018a610185366004610a43565b6103d5565b005b61018a61019a366004610a19565b6103e2565b6101346101ad366004610988565b6001600160a01b031660009081526020819052604090205490565b61018a6101d6366004610a19565b6103f0565b6100f7610476565b6101206101f1366004610a19565b610485565b610120610204366004610a19565b61051e565b6101346102173660046109aa565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461025190610ae0565b80601f016020809104026020016040519081016040528092919081815260200182805461027d90610ae0565b80156102ca5780601f1061029f576101008083540402835291602001916102ca565b820191906000526020600020905b8154815290600101906020018083116102ad57829003601f168201915b5050505050905090565b60006102e133848461052b565b50600192915050565b60006102f784848461064f565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103815760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61038e853385840361052b565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102e19185906103d0908690610ab1565b61052b565b6103df338261081e565b50565b6103ec828261081e565b5050565b60006103fc8333610217565b90508181101561045a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b6064820152608401610378565b610467833384840361052b565b610471838361081e565b505050565b60606004805461025190610ae0565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105075760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610378565b610514338585840361052b565b5060019392505050565b60006102e133848461064f565b6001600160a01b03831661058d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610378565b6001600160a01b0382166105ee5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610378565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106b35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610378565b6001600160a01b0382166107155760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610378565b6001600160a01b0383166000908152602081905260409020548181101561078d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610378565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107c4908490610ab1565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161081091815260200190565b60405180910390a350505050565b6001600160a01b03821661087e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610378565b6001600160a01b038216600090815260208190526040902054818110156108f25760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610378565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610921908490610ac9565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b80356001600160a01b038116811461098357600080fd5b919050565b60006020828403121561099a57600080fd5b6109a38261096c565b9392505050565b600080604083850312156109bd57600080fd5b6109c68361096c565b91506109d46020840161096c565b90509250929050565b6000806000606084860312156109f257600080fd5b6109fb8461096c565b9250610a096020850161096c565b9150604084013590509250925092565b60008060408385031215610a2c57600080fd5b610a358361096c565b946020939093013593505050565b600060208284031215610a5557600080fd5b5035919050565b600060208083528351808285015260005b81811015610a8957858101830151858201604001528201610a6d565b81811115610a9b576000604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610ac457610ac4610b1b565b500190565b600082821015610adb57610adb610b1b565b500390565b600181811c90821680610af457607f821691505b60208210811415610b1557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205f8c3ef66d4c6caaead4b282e29d63a60c6139c286ce95c8eaf20c841773078e64736f6c63430008060033";

export class MockBPT__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBPT> {
    return super.deploy(name, symbol, overrides || {}) as Promise<MockBPT>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): MockBPT {
    return super.attach(address) as MockBPT;
  }
  connect(signer: Signer): MockBPT__factory {
    return super.connect(signer) as MockBPT__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBPTInterface {
    return new utils.Interface(_abi) as MockBPTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBPT {
    return new Contract(address, _abi, signerOrProvider) as MockBPT;
  }
}
