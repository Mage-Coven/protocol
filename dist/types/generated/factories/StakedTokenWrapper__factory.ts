/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakedTokenWrapper,
  StakedTokenWrapperInterface,
} from "../StakedTokenWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rewardsToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakedToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "rewardsToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_delegatee",
        type: "address",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakedToken",
    outputs: [
      {
        internalType: "contract StakedToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_amountIncludesFee",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "_exitCooldown",
        type: "bool",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ce838038062000ce8833981016040819052620000349162000472565b600180546001600160a01b038084166001600160a01b0319928316179092556000805492851692909116821790556200008090826000196200022062000088602090811b91909117901c565b50506200056e565b801580620001165750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015620000d957600080fd5b505afa158015620000ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001149190620004ce565b155b6200018e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001e6918591620001eb16565b505050565b600062000247826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620002c960201b62000370179092919060201c565b805190915015620001e65780806020019051810190620002689190620004aa565b620001e65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000185565b6060620002da8484600085620002e4565b90505b9392505050565b606082471015620003475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000185565b843b620003975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000185565b600080866001600160a01b03168587604051620003b59190620004e8565b60006040518083038185875af1925050503d8060008114620003f4576040519150601f19603f3d011682016040523d82523d6000602084013e620003f9565b606091505b5090925090506200040c82828662000417565b979650505050505050565b6060831562000428575081620002dd565b825115620004395782518084602001fd5b8160405162461bcd60e51b815260040162000185919062000506565b80516001600160a01b03811681146200046d57600080fd5b919050565b600080604083850312156200048657600080fd5b620004918362000455565b9150620004a16020840162000455565b90509250929050565b600060208284031215620004bd57600080fd5b81518015158114620002dd57600080fd5b600060208284031215620004e157600080fd5b5051919050565b60008251620004fc8184602087016200053b565b9190910192915050565b6020815260008251806020840152620005278160408501602087016200053b565b601f01601f19169190910160400192915050565b60005b83811015620005585781810151838201526020016200053e565b8381111562000568576000848401525b50505050565b61076a806200057e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635fa456dc1461005c5780637acb775714610071578063a694fc3a14610084578063cc7a262e14610097578063d1af0c7d146100c6575b600080fd5b61006f61006a366004610653565b6100d9565b005b61006f61007f366004610627565b610155565b61006f6100923660046105f5565b6101bf565b6001546100aa906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546100aa906001600160a01b031681565b6001546040516317e915b760e21b8152600481018690526001600160a01b0385811660248301528415156044830152831515606483015290911690635fa456dc90608401600060405180830381600087803b15801561013757600080fd5b505af115801561014b573d6000803e3d6000fd5b5050505050505050565b600154604051637acb775760e01b8152600481018490526001600160a01b03838116602483015290911690637acb775790604401600060405180830381600087803b1580156101a357600080fd5b505af11580156101b7573d6000803e3d6000fd5b505050505050565b60015460405163534a7e1d60e11b8152600481018390526001600160a01b039091169063a694fc3a90602401600060405180830381600087803b15801561020557600080fd5b505af1158015610219573d6000803e3d6000fd5b5050505050565b8015806102a95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561026f57600080fd5b505afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a7919061060e565b155b6103195760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261036b908490610389565b505050565b606061037f848460008561045b565b90505b9392505050565b60006103de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166103709092919063ffffffff16565b80519091501561036b57808060200190518101906103fc91906105d8565b61036b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610310565b6060824710156104bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610310565b843b61050a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610310565b600080866001600160a01b0316858760405161052691906106a4565b60006040518083038185875af1925050503d8060008114610563576040519150601f19603f3d011682016040523d82523d6000602084013e610568565b606091505b5091509150610578828286610583565b979650505050505050565b60608315610592575081610382565b8251156105a25782518084602001fd5b8160405162461bcd60e51b815260040161031091906106c0565b80356001600160a01b03811681146105d357600080fd5b919050565b6000602082840312156105ea57600080fd5b815161038281610723565b60006020828403121561060757600080fd5b5035919050565b60006020828403121561062057600080fd5b5051919050565b6000806040838503121561063a57600080fd5b8235915061064a602084016105bc565b90509250929050565b6000806000806080858703121561066957600080fd5b84359350610679602086016105bc565b9250604085013561068981610723565b9150606085013561069981610723565b939692955090935050565b600082516106b68184602087016106f3565b9190910192915050565b60208152600082518060208401526106df8160408501602087016106f3565b601f01601f19169190910160400192915050565b60005b8381101561070e5781810151838201526020016106f6565b8381111561071d576000848401525b50505050565b801515811461073157600080fd5b5056fea26469706673582212201cc3374ffa4f4369bbdf1d5f1671955f16b4d22ae95601fc8ba3f3f9d22b532664736f6c63430008060033";

export class StakedTokenWrapper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _rewardsToken: string,
    _stakedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakedTokenWrapper> {
    return super.deploy(
      _rewardsToken,
      _stakedToken,
      overrides || {}
    ) as Promise<StakedTokenWrapper>;
  }
  getDeployTransaction(
    _rewardsToken: string,
    _stakedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardsToken,
      _stakedToken,
      overrides || {}
    );
  }
  attach(address: string): StakedTokenWrapper {
    return super.attach(address) as StakedTokenWrapper;
  }
  connect(signer: Signer): StakedTokenWrapper__factory {
    return super.connect(signer) as StakedTokenWrapper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakedTokenWrapperInterface {
    return new utils.Interface(_abi) as StakedTokenWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakedTokenWrapper {
    return new Contract(address, _abi, signerOrProvider) as StakedTokenWrapper;
  }
}
