/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IPLiquidator, IPLiquidatorInterface } from "../IPLiquidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_integration",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sellToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_bAsset",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_uniswapPath",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_minReturn",
        type: "uint256",
      },
    ],
    name: "createLiquidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integration",
        type: "address",
      },
    ],
    name: "deleteLiquidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integration",
        type: "address",
      },
    ],
    name: "triggerLiquidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_integration",
        type: "address",
      },
      {
        internalType: "address",
        name: "_bAsset",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_uniswapPath",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_minReturn",
        type: "uint256",
      },
    ],
    name: "updateBasset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IPLiquidator__factory {
  static readonly abi = _abi;
  static createInterface(): IPLiquidatorInterface {
    return new utils.Interface(_abi) as IPLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPLiquidator {
    return new Contract(address, _abi, signerOrProvider) as IPLiquidator;
  }
}
