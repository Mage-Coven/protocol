/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCToken, MockCTokenInterface } from "../MockCToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "contract ERC20",
        name: "_underlyingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOfUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dec",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "mintAmount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemAmount",
        type: "uint256",
      },
    ],
    name: "redeemUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "contract ERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateExchangeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040526005805460ff191660081790553480156200001e57600080fd5b50604051620015b0380380620015b0833981016040819052620000419162000283565b8251839083906200005a90600390602085019062000126565b5080516200007090600490602084019062000126565b5050506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620000af57600080fd5b505afa158015620000c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ea919062000310565b9050620000f98160086200033c565b620001099060ff16600a620003ad565b6006555060601b6001600160601b03191660805250620004d49050565b82805462000134906200046b565b90600052602060002090601f016020900481019282620001585760008555620001a3565b82601f106200017357805160ff1916838001178555620001a3565b82800160010185558215620001a3579182015b82811115620001a357825182559160200191906001019062000186565b50620001b1929150620001b5565b5090565b5b80821115620001b15760008155600101620001b6565b600082601f830112620001de57600080fd5b81516001600160401b0380821115620001fb57620001fb620004be565b604051601f8301601f19908116603f01168101908282118183101715620002265762000226620004be565b816040528381526020925086838588010111156200024357600080fd5b600091505b8382101562000267578582018301518183018401529082019062000248565b83821115620002795760008385830101525b9695505050505050565b6000806000606084860312156200029957600080fd5b83516001600160401b0380821115620002b157600080fd5b620002bf87838801620001cc565b94506020860151915080821115620002d657600080fd5b50620002e586828701620001cc565b604086015190935090506001600160a01b03811681146200030557600080fd5b809150509250925092565b6000602082840312156200032357600080fd5b815160ff811681146200033557600080fd5b9392505050565b600060ff821660ff84168060ff038211156200035c576200035c620004a8565b019392505050565b600181815b80851115620003a5578160001904821115620003895762000389620004a8565b808516156200039757918102915b93841c939080029062000369565b509250929050565b6000620003358383600082620003c65750600162000465565b81620003d55750600062000465565b8160018114620003ee5760028114620003f95762000419565b600191505062000465565b60ff8411156200040d576200040d620004a8565b50506001821b62000465565b5060208310610133831016604e8410600b84101617156200043e575081810a62000465565b6200044a838362000364565b8060001904821115620004615762000461620004a8565b0290505b92915050565b600181811c908216806200048057607f821691505b60208210811415620004a257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160601c6110a16200050f600039600081816101a30152818161056c0152818161062b015281816106ca015261076701526110a16000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80633af9e669116100ad578063a0712d6811610071578063a0712d681461024f578063a457c2d714610262578063a9059cbb14610275578063b3bcfa8214610288578063dd62ed3e1461029557600080fd5b80633af9e669146102055780633ba0b9a91461021857806370a0823114610221578063852a12e31461023457806395d89b411461024757600080fd5b8063182df0f5116100f4578063182df0f51461018357806323b872dd1461018b5780632495a5991461019e578063313ce567146101dd57806339509351146101f257600080fd5b806302ce728f1461012657806306fdde0314610130578063095ea7b31461014e57806318160ddd14610171575b600080fd5b61012e6102ce565b005b6101386102eb565b6040516101459190610f55565b60405180910390f35b61016161015c366004610ed7565b61037d565b6040519015158152602001610145565b6002545b604051908152602001610145565b600654610175565b610161610199366004610e9b565b610393565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610145565b60125b60405160ff9091168152602001610145565b610161610200366004610ed7565b610442565b610175610213366004610e4d565b61047e565b61017560065481565b61017561022f366004610e4d565b610518565b610175610242366004610f23565b610538565b6101386105fa565b61017561025d366004610f23565b610609565b610161610270366004610ed7565b61081c565b610161610283366004610ed7565b6108b5565b6005546101e09060ff1681565b6101756102a3366004610e68565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600654670de0c8e444494000906102e590826108c2565b60065550565b6060600380546102fa9061101a565b80601f01602080910402602001604051908101604052809291908181526020018280546103269061101a565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b5050505050905090565b600061038a3384846108d7565b50600192915050565b60006103a08484846109fc565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561042a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61043785338584036108d7565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161038a918590610479908690610faa565b6108d7565b6040516370a0823160e01b81526001600160a01b0382166004820152600090819030906370a082319060240160206040518083038186803b1580156104c257600080fd5b505afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa9190610f3c565b9050610511600654826108c290919063ffffffff16565b9392505050565b6001600160a01b0381166000908152602081905260408120545b92915050565b60008061054483610bcb565b90506105503382610bed565b60405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190610f01565b5060009392505050565b6060600480546102fa9061101a565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561066d57600080fd5b505afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a59190610f3c565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074e9190610f01565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156107b157600080fd5b505afa1580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e99190610f3c565b905060006107f78383611003565b9050600061080482610bcb565b90506108103382610d33565b50600095945050505050565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561089e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610421565b6108ab33858584036108d7565b5060019392505050565b600061038a3384846109fc565b60006105118383670de0b6b3a7640000610e12565b6001600160a01b0383166109395760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610421565b6001600160a01b03821661099a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610421565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610a605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610421565b6001600160a01b038216610ac25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610421565b6001600160a01b03831660009081526020819052604090205481811015610b3a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610421565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610b71908490610faa565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bbd91815260200190565b60405180910390a350505050565b600654600090610be383670de0b6b3a7640000610fe4565b6105329190610fc2565b6001600160a01b038216610c4d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610421565b6001600160a01b03821660009081526020819052604090205481811015610cc15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610421565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610cf0908490611003565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016109ef565b6001600160a01b038216610d895760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610421565b8060026000828254610d9b9190610faa565b90915550506001600160a01b03821660009081526020819052604081208054839290610dc8908490610faa565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600081610e1f8486610fe4565b610e299190610fc2565b949350505050565b80356001600160a01b0381168114610e4857600080fd5b919050565b600060208284031215610e5f57600080fd5b61051182610e31565b60008060408385031215610e7b57600080fd5b610e8483610e31565b9150610e9260208401610e31565b90509250929050565b600080600060608486031215610eb057600080fd5b610eb984610e31565b9250610ec760208501610e31565b9150604084013590509250925092565b60008060408385031215610eea57600080fd5b610ef383610e31565b946020939093013593505050565b600060208284031215610f1357600080fd5b8151801515811461051157600080fd5b600060208284031215610f3557600080fd5b5035919050565b600060208284031215610f4e57600080fd5b5051919050565b600060208083528351808285015260005b81811015610f8257858101830151858201604001528201610f66565b81811115610f94576000604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610fbd57610fbd611055565b500190565b600082610fdf57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610ffe57610ffe611055565b500290565b60008282101561101557611015611055565b500390565b600181811c9082168061102e57607f821691505b6020821081141561104f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203849f37e7a3135605e47eac5d6ff43c610cec256e09c087ab85549595c6384a764736f6c63430008060033";

export class MockCToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _name: string,
    _symbol: string,
    _underlyingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCToken> {
    return super.deploy(
      _name,
      _symbol,
      _underlyingToken,
      overrides || {}
    ) as Promise<MockCToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _underlyingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _underlyingToken,
      overrides || {}
    );
  }
  attach(address: string): MockCToken {
    return super.attach(address) as MockCToken;
  }
  connect(signer: Signer): MockCToken__factory {
    return super.connect(signer) as MockCToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCTokenInterface {
    return new utils.Interface(_abi) as MockCTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCToken {
    return new Contract(address, _abi, signerOrProvider) as MockCToken;
  }
}
