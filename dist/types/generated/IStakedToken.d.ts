/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IStakedTokenInterface extends ethers.utils.Interface {
  functions: {
    "COOLDOWN_SECONDS()": FunctionFragment;
    "STAKED_TOKEN()": FunctionFragment;
    "UNSTAKE_WINDOW()": FunctionFragment;
    "applyQuestMultiplier(address,uint8)": FunctionFragment;
    "balanceData(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blackListWrapper(address)": FunctionFragment;
    "calcRedemptionFeeRate(uint32)": FunctionFragment;
    "changeSlashingPercentage(uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "createLock(uint256,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "emergencyRecollateralisation()": FunctionFragment;
    "endCooldown()": FunctionFragment;
    "exit()": FunctionFragment;
    "getPastTotalSupply(uint256)": FunctionFragment;
    "getPastVotes(address,uint256)": FunctionFragment;
    "getRewardToken()": FunctionFragment;
    "getVotes(address)": FunctionFragment;
    "increaseLockAmount(uint256)": FunctionFragment;
    "increaseLockLength(uint256)": FunctionFragment;
    "pendingAdditionalReward()": FunctionFragment;
    "rawBalanceOf(address)": FunctionFragment;
    "reviewTimestamp(address)": FunctionFragment;
    "safetyData()": FunctionFragment;
    "setGovernanceHook(address)": FunctionFragment;
    "stake(uint256,address)": FunctionFragment;
    "startCooldown(uint256)": FunctionFragment;
    "whitelistWrapper(address)": FunctionFragment;
    "whitelistedWrappers(address)": FunctionFragment;
    "withdraw(uint256,address,bool,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COOLDOWN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKED_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSTAKE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyQuestMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceData", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blackListWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcRedemptionFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSlashingPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emergencyRecollateralisation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPastTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVotes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "increaseLockAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdditionalReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "safetyData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceHook",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedWrappers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, boolean, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "COOLDOWN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKED_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSTAKE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyQuestMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blackListWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRedemptionFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSlashingPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRecollateralisation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPastTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdditionalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safetyData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedWrappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IStakedToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStakedTokenInterface;

  functions: {
    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceData(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, number, number, number, BigNumber] & {
          raw: BigNumber;
          weightedTimestamp: number;
          timeMultiplier: number;
          questMultiplier: number;
          cooldownTimestamp: number;
          cooldownUnits: BigNumber;
        }
      ]
    >;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blackListWrapper(
      _wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcRedemptionFeeRate(
      _weightedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _feeRate: BigNumber }>;

    changeSlashingPercentage(
      _newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReward(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLock(
      _value: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegates(account: string, overrides?: CallOverrides): Promise<[string]>;

    emergencyRecollateralisation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endCooldown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardToken(overrides?: CallOverrides): Promise<[string]>;

    getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseLockAmount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseLockLength(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingAdditionalReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reviewTimestamp(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safetyData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralisationRatio: BigNumber;
        slashingPercentage: BigNumber;
      }
    >;

    setGovernanceHook(
      _newHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256,address)"(
      _amount: BigNumberish,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256,bool)"(
      _amount: BigNumberish,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startCooldown(
      _units: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistWrapper(
      _wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedWrappers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      _amountIncludesFee: boolean,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

  UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  applyQuestMultiplier(
    _account: string,
    _newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceData(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, BigNumber] & {
      raw: BigNumber;
      weightedTimestamp: number;
      timeMultiplier: number;
      questMultiplier: number;
      cooldownTimestamp: number;
      cooldownUnits: BigNumber;
    }
  >;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blackListWrapper(
    _wrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcRedemptionFeeRate(
    _weightedTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeSlashingPercentage(
    _newRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReward()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReward(address)"(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLock(
    _value: BigNumberish,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegates(account: string, overrides?: CallOverrides): Promise<string>;

  emergencyRecollateralisation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endCooldown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPastTotalSupply(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardToken(overrides?: CallOverrides): Promise<string>;

  getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseLockAmount(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseLockLength(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>;

  rawBalanceOf(
    _account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  reviewTimestamp(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safetyData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralisationRatio: BigNumber;
      slashingPercentage: BigNumber;
    }
  >;

  setGovernanceHook(
    _newHook: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256,address)"(
    _amount: BigNumberish,
    _delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256,bool)"(
    _amount: BigNumberish,
    _exitCooldown: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startCooldown(
    _units: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistWrapper(
    _wrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedWrappers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    _amount: BigNumberish,
    _recipient: string,
    _amountIncludesFee: boolean,
    _exitCooldown: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceData(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, BigNumber] & {
        raw: BigNumber;
        weightedTimestamp: number;
        timeMultiplier: number;
        questMultiplier: number;
        cooldownTimestamp: number;
        cooldownUnits: BigNumber;
      }
    >;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blackListWrapper(
      _wrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calcRedemptionFeeRate(
      _weightedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSlashingPercentage(
      _newRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward()"(overrides?: CallOverrides): Promise<void>;

    "claimReward(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createLock(
      _value: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegates(account: string, overrides?: CallOverrides): Promise<string>;

    emergencyRecollateralisation(overrides?: CallOverrides): Promise<void>;

    endCooldown(overrides?: CallOverrides): Promise<void>;

    exit(overrides?: CallOverrides): Promise<void>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<string>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseLockAmount(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLockLength(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reviewTimestamp(_account: string, overrides?: CallOverrides): Promise<void>;

    safetyData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralisationRatio: BigNumber;
        slashingPercentage: BigNumber;
      }
    >;

    setGovernanceHook(
      _newHook: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,address)"(
      _amount: BigNumberish,
      _delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,bool)"(
      _amount: BigNumberish,
      _exitCooldown: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startCooldown(
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistWrapper(
      _wrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedWrappers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      _amountIncludesFee: boolean,
      _exitCooldown: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceData(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blackListWrapper(
      _wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcRedemptionFeeRate(
      _weightedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSlashingPercentage(
      _newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReward(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLock(
      _value: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyRecollateralisation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endCooldown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseLockAmount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseLockLength(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingAdditionalReward(overrides?: CallOverrides): Promise<BigNumber>;

    rawBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reviewTimestamp(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safetyData(overrides?: CallOverrides): Promise<BigNumber>;

    setGovernanceHook(
      _newHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256,address)"(
      _amount: BigNumberish,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256,bool)"(
      _amount: BigNumberish,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startCooldown(
      _units: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistWrapper(
      _wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedWrappers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      _amountIncludesFee: boolean,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyQuestMultiplier(
      _account: string,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceData(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackListWrapper(
      _wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcRedemptionFeeRate(
      _weightedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeSlashingPercentage(
      _newRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLock(
      _value: BigNumberish,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegates(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyRecollateralisation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endCooldown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLockAmount(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseLockLength(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingAdditionalReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewTimestamp(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safetyData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovernanceHook(
      _newHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256,address)"(
      _amount: BigNumberish,
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256,bool)"(
      _amount: BigNumberish,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startCooldown(
      _units: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistWrapper(
      _wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedWrappers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      _amountIncludesFee: boolean,
      _exitCooldown: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
