/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZusdLegacyInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cacheSize()": FunctionFragment;
    "collectInterest()": FunctionFragment;
    "collectPlatformInterest()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "forgeValidator()": FunctionFragment;
    "getBasketManager()": FunctionFragment;
    "getSwapOutput(address,address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string,address,address,address)": FunctionFragment;
    "lockForgeValidator()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintMulti(address[],uint256[],address)": FunctionFragment;
    "mintTo(address,uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nexus()": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "redeemMasset(uint256,address)": FunctionFragment;
    "redeemMulti(address[],uint256[],address)": FunctionFragment;
    "redeemTo(address,uint256,address)": FunctionFragment;
    "redemptionFee()": FunctionFragment;
    "setCacheSize(uint256)": FunctionFragment;
    "setRedemptionFee(uint256)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "surplus()": FunctionFragment;
    "swap(address,address,uint256,address)": FunctionFragment;
    "swapFee()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "upgradeForgeValidator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "cacheSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectPlatformInterest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forgeValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasketManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOutput",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockForgeValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMulti",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nexus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemMasset",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemMulti",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTo",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCacheSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "surplus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeForgeValidator",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cacheSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPlatformInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forgeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasketManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockForgeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMulti", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nexus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemMasset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCacheSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "surplus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeForgeValidator",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CacheSizeChanged(uint256)": EventFragment;
    "ForgeValidatorChanged(address)": EventFragment;
    "Minted(address,address,uint256,address,uint256)": EventFragment;
    "MintedMulti(address,address,uint256,address[],uint256[])": EventFragment;
    "PaidFee(address,address,uint256)": EventFragment;
    "Redeemed(address,address,uint256,address[],uint256[])": EventFragment;
    "RedeemedMasset(address,address,uint256)": EventFragment;
    "RedemptionFeeChanged(uint256)": EventFragment;
    "SwapFeeChanged(uint256)": EventFragment;
    "Swapped(address,address,address,uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CacheSizeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeValidatorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedMulti"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedMasset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ZusdLegacy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZusdLegacyInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cacheSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forgeValidator(overrides?: CallOverrides): Promise<[string]>;

    getBasketManager(overrides?: CallOverrides): Promise<[string]>;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber] & { output: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _nameArg: string,
      _symbolArg: string,
      _nexus: string,
      _forgeValidator: string,
      _basketManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockForgeValidator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintMulti(
      _bAssets: string[],
      _bAssetQuantity: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTo(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemMasset(
      _mAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemMulti(
      _bAssets: string[],
      _bAssetQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemTo(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redemptionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCacheSize(
      _cacheSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFee(
      _redemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    surplus(overrides?: CallOverrides): Promise<[BigNumber]>;

    swap(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeForgeValidator(
      _newForgeValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  cacheSize(overrides?: CallOverrides): Promise<BigNumber>;

  collectInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectPlatformInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forgeValidator(overrides?: CallOverrides): Promise<string>;

  getBasketManager(overrides?: CallOverrides): Promise<string>;

  getSwapOutput(
    _input: string,
    _output: string,
    _quantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string, BigNumber] & { output: BigNumber }>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _nameArg: string,
    _symbolArg: string,
    _nexus: string,
    _forgeValidator: string,
    _basketManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockForgeValidator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    _bAsset: string,
    _bAssetQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintMulti(
    _bAssets: string[],
    _bAssetQuantity: BigNumberish[],
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTo(
    _bAsset: string,
    _bAssetQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nexus(overrides?: CallOverrides): Promise<string>;

  redeem(
    _bAsset: string,
    _bAssetQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemMasset(
    _mAssetQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemMulti(
    _bAssets: string[],
    _bAssetQuantities: BigNumberish[],
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemTo(
    _bAsset: string,
    _bAssetQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

  setCacheSize(
    _cacheSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFee(
    _redemptionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    _swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  surplus(overrides?: CallOverrides): Promise<BigNumber>;

  swap(
    _input: string,
    _output: string,
    _quantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeForgeValidator(
    _newForgeValidator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cacheSize(overrides?: CallOverrides): Promise<BigNumber>;

    collectInterest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        swapFeesGained: BigNumber;
        newSupply: BigNumber;
      }
    >;

    collectPlatformInterest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        interestGained: BigNumber;
        newSupply: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    forgeValidator(overrides?: CallOverrides): Promise<string>;

    getBasketManager(overrides?: CallOverrides): Promise<string>;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber] & { output: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _nameArg: string,
      _symbolArg: string,
      _nexus: string,
      _forgeValidator: string,
      _basketManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lockForgeValidator(overrides?: CallOverrides): Promise<void>;

    mint(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintMulti(
      _bAssets: string[],
      _bAssetQuantity: BigNumberish[],
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTo(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nexus(overrides?: CallOverrides): Promise<string>;

    redeem(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemMasset(
      _mAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemMulti(
      _bAssets: string[],
      _bAssetQuantities: BigNumberish[],
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemTo(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    setCacheSize(
      _cacheSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFee(
      _redemptionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    surplus(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeForgeValidator(
      _newForgeValidator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    CacheSizeChanged(
      cacheSize?: null
    ): TypedEventFilter<[BigNumber], { cacheSize: BigNumber }>;

    ForgeValidatorChanged(
      forgeValidator?: null
    ): TypedEventFilter<[string], { forgeValidator: string }>;

    Minted(
      minter?: string | null,
      recipient?: null,
      mAssetQuantity?: null,
      bAsset?: null,
      bAssetQuantity?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        minter: string;
        recipient: string;
        mAssetQuantity: BigNumber;
        bAsset: string;
        bAssetQuantity: BigNumber;
      }
    >;

    MintedMulti(
      minter?: string | null,
      recipient?: null,
      mAssetQuantity?: null,
      bAssets?: null,
      bAssetQuantities?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string[], BigNumber[]],
      {
        minter: string;
        recipient: string;
        mAssetQuantity: BigNumber;
        bAssets: string[];
        bAssetQuantities: BigNumber[];
      }
    >;

    PaidFee(
      payer?: string | null,
      asset?: null,
      feeQuantity?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { payer: string; asset: string; feeQuantity: BigNumber }
    >;

    Redeemed(
      redeemer?: string | null,
      recipient?: null,
      mAssetQuantity?: null,
      bAssets?: null,
      bAssetQuantities?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string[], BigNumber[]],
      {
        redeemer: string;
        recipient: string;
        mAssetQuantity: BigNumber;
        bAssets: string[];
        bAssetQuantities: BigNumber[];
      }
    >;

    RedeemedMasset(
      redeemer?: string | null,
      recipient?: null,
      mAssetQuantity?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { redeemer: string; recipient: string; mAssetQuantity: BigNumber }
    >;

    RedemptionFeeChanged(
      fee?: null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    SwapFeeChanged(
      fee?: null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    Swapped(
      swapper?: string | null,
      input?: null,
      output?: null,
      outputAmount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        swapper: string;
        input: string;
        output: string;
        outputAmount: BigNumber;
        recipient: string;
      }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cacheSize(overrides?: CallOverrides): Promise<BigNumber>;

    collectInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forgeValidator(overrides?: CallOverrides): Promise<BigNumber>;

    getBasketManager(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _nameArg: string,
      _symbolArg: string,
      _nexus: string,
      _forgeValidator: string,
      _basketManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockForgeValidator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintMulti(
      _bAssets: string[],
      _bAssetQuantity: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTo(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemMasset(
      _mAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemMulti(
      _bAssets: string[],
      _bAssetQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemTo(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    setCacheSize(
      _cacheSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedemptionFee(
      _redemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    surplus(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeForgeValidator(
      _newForgeValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cacheSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forgeValidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBasketManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _nameArg: string,
      _symbolArg: string,
      _nexus: string,
      _forgeValidator: string,
      _basketManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockForgeValidator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintMulti(
      _bAssets: string[],
      _bAssetQuantity: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTo(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemMasset(
      _mAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemMulti(
      _bAssets: string[],
      _bAssetQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemTo(
      _bAsset: string,
      _bAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redemptionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCacheSize(
      _cacheSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFee(
      _redemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    surplus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeForgeValidator(
      _newForgeValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
